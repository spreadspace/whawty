whawty-auth(8)
==============

NAME
----

whawty-auth - manage whawty auth stores


SYNOPSIS
--------

*whawty-auth*  '[global options]' *<command>* '[command options]' '[arguments ... ]'


DESCRIPTION
-----------

*whawty-auth* implements everything which is needed to run a whawty auth service.
This tool can be used to initialize and manage whawty auth stores. When used as a
daemon it can be used to offer a saslauthd compatible authentication service and
or a small web interface to manage users and passwords. Together with *pam_whawty*
authentication can also be done using PAM.


GLOBAL OPTIONS
--------------

The following global options can be passed to *whawty-auth*.

*-h | --help*::
    Show help text and exit.

*-v | --version*::
    Print version information and exit.

*--store* '</path/to/config.yaml>'::
    This sets the path to store configuration file. By default *whawty-auth* uses
    the file '/etc/whawty/auth-store.yaml'. This may also be configured using
    the environment variable 'WHAWTY_AUTH_STORE_CONFIG'. If both the environment variable
    and the command line option are supplied the latter is used.

*--do-check*'[=(true|false)]'::
    Run basic consistency check on the whawty store on startup. By default checks
    are enabled. This can also be configured using the environment variable
    'WHAWTY_AUTH_DO_CHECK'. If both the environment variable and the command line
    option are supplied the latter is used.

*--web-static-dir* '</path/to/whawty/admin/interface>'::
     This sets the path to the static files of the admin web-interface. By default the path
     '/usr/share/whawty/auth-admin/' will be used. This can also be specified using the
     environment variable 'WHAWTY_AUTH_WEB_STATIC_DIR'. If both the command line option as well
     as the environment variable are supplied the value of the command line option will be
     used.

*--do-upgrades* '(local|<remote-url>)'::
     This enables local or remote upgrades for password hashes. By default no upgrades will
     be done. 'local' means direct upgrades on the local store. 'remote' upgrades can be
     configured by specifying the url to a remote *whawy-auth* instance. The url must point to
     the web-api endpoint on that host (i.e. 'https://whawty-master.example.com/api/update').
     For any password hash which is upgradeable an update call to the remote host will be
     initialized after the user is successfully authenticated. This is done in a opportunistic
     way. This means errors while calling the remote update will be ignored.
     You may as well use the environment variable 'WHAWTY_AUTH_DO_UPGRADES' to configure
     upgrades. If both the command line option as well as the environment variable are supplied
     the value of the command line option will be used.

*--policy-type* '<type>'::
     This tells the app to check new passwords against a password policy. At the moment only one
     password policy type is available: 'zxcvbn'. If this is omitted there won't be any policy
     enforced. The password policy will be used whenever a user is added or the password of a user
     gets changed. The operation will fail if the policy is not fulfilled.
     You may as well configure this using the environment variable 'WHAWTY_AUTH_POLICY_TYPE'.
     As with all other options the value supplied using the command line will override any value
     set using the environment.

*--policy-condition* '<condition>'::
     This configures which condition must be met in order to fulfill the password policy. The
     value depends on the policy-type used. For now the only policy type is 'zxcvbn' which allows
     to evaluate passwords on the basis of entropy, estimated crack-time and the score. The
     entropy and the crack-time are positive numbers with no upper bound. The score is a value
     between 0 and 4, where 0 is a very weak password and 4 is the highest possible strength. The
     condition can have the following form: '(entropy|time|score) >= <value>'.
     For example the condition 'time >= 3600' allows all passwords which have a estimated crack-time
     of one hour or longer. Besides the command line option you may use the environment variable
     'WHAWTY_AUTH_POLICY_CONDITION' to configure the condition. Again the command line option,
     should it exists, overrides any value from the environment.

*--hooks-dir* '</path/to/hooks>'::
     Whenever there is a change in the store (add, remove, update or set-admin) *whawty-auth* will
     run all exectuables inside this directory. This can for example be used to request a resync of
     the local store with remote copies.
     If this option is omitted there won't be any hooks called. Hooks are called with a sole argument
     'update'. The base directory of the store can be fetched from the environment variable
     'WHAWTY_AUTH_STORE'. These hooks are called at most once every 5 seconds. If a hook runs longer
     than 1 minute it will get killed.
     Beside the command line option you may use the environment variable 'WHAWTY_AUTH_HOOKS_DIR'. If
     both the environment variable and the command line option are set, the latter will be used.

COMMANDS
--------

Any of the following commands supports *-h | --help* as an option. This will print
extra help information for the command. All these commands use the auth store directory
as specified by the global store configuration file.

init '<adminname>' '[<password>]'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*init* can be used to initialize a whawty auth store. For this to work the directory
must exist, be writeable by the user who runs the program and must be empty. The first
argument is the name of the admin user which will get created. The password of the
user can be supplied using a second optional argument. If no password is supplied on
the command line *whawty-auth* will prompt the user for it.


check
~~~~~

Check the whawty auth store for consistency. On success the exit code will be 0. Any
other value means that there is an error.


add '<username>' '[<password>]'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This adds a user to the store. The name of the user must be supplied as the first
argument. The password may be supplied as a second parameter. If this is omitted
*whawty-auth* prompts the user for it.


remove '<username>'
~~~~~~~~~~~~~~~~~~~

*remove* can be used to delete a user from the store. The sole argument supported
specifies the user to be deleted.


update '<username>' '[<password>]'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This can be used to change the password of an existing user. The first argument
specifies the username. The new password may be specified as a second argument.
If no password is set using the command line the user will be prompted for it.
Mind that to change a password via the command-line you don't need to know the
old password.


set-admin  '<username>' '(true|false)'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*set-admin* can be used to change the admin status of a user. The first argument
is the username. The second argument should reflect the new status. *true* or *1*
enables the admin flag. *false* or *0* disables it.


list '[options]'
~~~~~~~~~~~~~~~~

This prints a list of all users in the store.

*--full*::
    This option tells *whawty-auth* to print additional info for each user. By default
    only the name, admin status and last change date are printed. This also prints
    users which have an unsupported hash formats. These users are ingored by the normal
    list command.


authenticate '<username>' '[<password>]'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*authenticate* runs a full auth-check for the given user. The username in question needs
to be supplied as a first argument. The second optional argument is the password. If
no password is specified the user will be prompted for it. If the authentication was
successful the result code will be 0. On error the result code will be 1.


run '[options]'
~~~~~~~~~~~~~~~

This instructs *whawty-auth* to run as an authentication service.

*--sock* '</path/to/whawty/sock>'::
     Open a saslauthd compatible unix socket. This option might be supplied several times.
     *whawty-auth* will listen on all sockets for authentication requests. In addition
     to this, paths may be specified using the environment variable 'WHAWTY_AUTH_SASL_SOCK'
     as a comma-seperated list. All sockets defined on command line and via the environment
     are merged and *whawty-auth* will listen on all sockets simultaneously.

*--web-addr* '[<addr>]:<port>'::
     Also start a small web interface on the specified address. This can also be specified
     using the environment variable 'WHAWTY_AUTH_WEB_ADDR'. If both the command line option
     as well as the environment variable are supplied the value of the command line option
     will be used.


runsa
~~~~~

This is basically the same as *run* but expects all sockets to be passed via systemd
socket activation. *whawty-auth* will run the web-api on all TCP sockets and expects
saslauthd compatible requests on any unix socket. All other socket types are ignored.


SIGNALS
-------

On HUP *whawty-auth* tries to reload the store configuration. I also runs a basic
consistency check. If there is any error during that process the old configurtion
will be kept.


BUGS
----

Most likely there are some bugs in *whawty-auth*. If you find a bug, please let
the developers know at http://github.com/whawty/auth. Of course, pull requests
are preferred.


SEE ALSO
--------

*pam-whawty*(8)


AUTHORS
-------

Christian Pointner <equinox@spreadspace.org>


RESOURCES
---------

Main web site: http://github.com/whawty/auth
